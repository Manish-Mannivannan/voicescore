name: Build VoiceScore

on:
  push:
    tags:
      - 'v*'        # e.g. v1.0.0
  workflow_dispatch:

jobs:
  release:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]  # we skip linux now
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Turn off audit/fund prompts (mostly matters on Windows)
      - name: Configure npm
        run: |
          npm config set fund false
          npm config set audit false

      # Install root deps
      - name: Install root deps
        run: npm install

      # Install renderer deps
      - name: Install renderer deps
        run: |
          cd renderer
          npm install

      # Ensure whisper dir exists in the repo workspace
      - name: Create whisper dir
        run: |
          mkdir -p electron/whisper

      # Prepare Whisper for WINDOWS
      - name: Fetch Whisper for Windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cd electron/whisper

          echo "Downloading Windows whisper release zip..."
          curl -L -o whisper.zip https://github.com/ggerganov/whisper.cpp/releases/latest/download/whisper-bin-x64.zip

          echo "Unzipping..."
          unzip whisper.zip || tar -xf whisper.zip

          # Now we expect whisper-cli.exe + DLLs etc to be somewhere in the extracted tree.
          # We'll move anything useful into this folder.
          # Many of the official zips extract into ./Release or similar.
          # Let's just find whisper-cli.exe and copy nearby files.

          exe_path=$(find . -maxdepth 3 -iname "whisper-cli.exe" | head -n 1)
          if [ -z "$exe_path" ]; then
            echo "Could not locate whisper-cli.exe in zip" >&2
            exit 1
          fi

          exe_dir=$(dirname "$exe_path")
          echo "Found whisper-cli.exe in $exe_dir"

          cp "$exe_dir"/* ./

          echo "Downloading base English model..."
          curl -L -o ggml-base.en.bin https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-base.en.bin

          ls -R .

      # Prepare Whisper for MACOS (build from source)
      - name: Fetch & build Whisper for macOS
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          cd electron/whisper

          echo "Cloning whisper.cpp..."
          git clone https://github.com/ggerganov/whisper.cpp.git src-whisper
          cd src-whisper

          echo "Building whisper-cli (no GPU)..."
          make whisper-cli

          # copy the built binary out
          cp ./main ./whisper-cli || true
          cp ./whisper-cli ./../whisper-cli || true
          cp ./whisper-cli ./../whisper-cli-macos || true
          cd ..

          # We now expect a 'whisper-cli' binary in electron/whisper.
          if [ ! -f "./whisper-cli" ] && [ ! -f "./whisper-cli-macos" ]; then
            echo "Did not produce whisper-cli binary" >&2
            ls -R .
            exit 1
          fi

          echo "Downloading base English model..."
          curl -L -o ggml-base.en.bin https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-base.en.bin

          ls -R .

      # Build renderer (Vite prod build)
      - name: Build renderer
        run: |
          cd renderer
          npm run build
          cd ..

      # Package Electron app
      - name: Build Electron distributable
        run: npm run electron-build

      # Upload packaged app as artifact
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VoiceScore-${{ matrix.os }}
          path: dist/**
